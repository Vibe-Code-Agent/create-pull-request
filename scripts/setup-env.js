#!/usr/bin/env node

const inquirer = require('inquirer');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

const CONFIG_FILE = path.join(__dirname, '..', 'config', 'env-config.json');

async function setupEnvironment() {
    console.log(chalk.blue('üöÄ Environment Setup Wizard'));
    console.log(chalk.gray('This will collect your environment configuration and save it for global use.\n'));

    const questions = [
        {
            type: 'input',
            name: 'jiraBaseUrl',
            message: 'Enter your Jira base URL (e.g., https://your-company.atlassian.net):',
            validate: (input) => {
                if (!input.trim()) return 'Jira base URL is required';
                try {
                    new URL(input);
                    return true;
                } catch {
                    return 'Please enter a valid URL';
                }
            }
        },
        {
            type: 'input',
            name: 'jiraUsername',
            message: 'Enter your Jira username/email:',
            validate: (input) => input.trim() ? true : 'Jira username is required'
        },
        {
            type: 'password',
            name: 'jiraApiToken',
            message: 'Enter your Jira API token:',
            validate: (input) => input.trim() ? true : 'Jira API token is required'
        },
        {
            type: 'password',
            name: 'githubToken',
            message: 'Enter your GitHub personal access token:',
            validate: (input) => input.trim() ? true : 'GitHub token is required'
        },
        {
            type: 'password',
            name: 'copilotApiToken',
            message: 'Enter your GitHub Copilot API token (optional):',
            default: ''
        },
        {
            type: 'input',
            name: 'defaultBranch',
            message: 'Enter your default branch name:',
            default: 'main'
        },
        {
            type: 'input',
            name: 'jiraProjectKey',
            message: 'Enter your default Jira project key (optional):',
            default: ''
        }
    ];

    try {
        const answers = await inquirer.prompt(questions);
        
        // Create config directory if it doesn't exist
        const configDir = path.dirname(CONFIG_FILE);
        if (!fs.existsSync(configDir)) {
            fs.mkdirSync(configDir, { recursive: true });
        }

        // Prepare configuration object
        const config = {
            jira: {
                baseUrl: answers.jiraBaseUrl,
                username: answers.jiraUsername,
                apiToken: answers.jiraApiToken,
                projectKey: answers.jiraProjectKey || null
            },
            github: {
                token: answers.githubToken,
                defaultBranch: answers.defaultBranch
            },
            copilot: {
                apiToken: answers.copilotApiToken || null
            },
            createdAt: new Date().toISOString(),
            version: '1.0.0'
        };

        // Save configuration to JSON file
        fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));

        console.log(chalk.green('\n‚úÖ Environment configuration saved successfully!'));
        console.log(chalk.gray(`Configuration saved to: ${CONFIG_FILE}`));
        
        // Also create .env file for backward compatibility
        const envContent = `# Generated by setup-env.js on ${new Date().toISOString()}
JIRA_BASE_URL=${config.jira.baseUrl}
JIRA_USERNAME=${config.jira.username}
JIRA_API_TOKEN=${config.jira.apiToken}
GITHUB_TOKEN=${config.github.token}
${config.copilot.apiToken ? `COPILOT_API_TOKEN=${config.copilot.apiToken}` : '# COPILOT_API_TOKEN='}
DEFAULT_BRANCH=${config.github.defaultBranch}
${config.jira.projectKey ? `JIRA_PROJECT_KEY=${config.jira.projectKey}` : '# JIRA_PROJECT_KEY='}
`;

        const envFile = path.join(__dirname, '..', '.env');
        fs.writeFileSync(envFile, envContent);
        console.log(chalk.gray(`Also created .env file for backward compatibility`));

        console.log(chalk.yellow('\n‚ö†Ô∏è  Security Note: Keep your configuration files secure and do not commit them to version control.'));
        
    } catch (error) {
        console.error(chalk.red('\n‚ùå Error during setup:'), error.message);
        process.exit(1);
    }
}

// Helper function to load configuration
function loadConfig() {
    if (!fs.existsSync(CONFIG_FILE)) {
        throw new Error('Configuration file not found. Please run the setup script first.');
    }
    
    try {
        const configData = fs.readFileSync(CONFIG_FILE, 'utf8');
        return JSON.parse(configData);
    } catch (error) {
        throw new Error('Failed to parse configuration file: ' + error.message);
    }
}

// Helper function to get specific config values
function getConfig(section, key) {
    const config = loadConfig();
    if (section && key) {
        return config[section] ? config[section][key] : undefined;
    } else if (section) {
        return config[section];
    }
    return config;
}

// Export functions for use in other modules
module.exports = {
    setupEnvironment,
    loadConfig,
    getConfig,
    CONFIG_FILE
};

// Run setup if called directly
if (require.main === module) {
    setupEnvironment();
}