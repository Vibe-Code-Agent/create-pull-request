name: 🚀 Publish to NPM

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      dry_run:
        description: "Run in dry-run mode (no actual publish)"
        required: false
        default: false
        type: boolean

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    # Only run on main branch or tags
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    outputs:
      package_name: ${{ steps.package-info.outputs.package_name }}
      package_version: ${{ steps.package-info.outputs.package_version }}

    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: 📦 Cache build and publish artifacts
        uses: actions/cache@v4
        with:
          path: |
            lib
            *.tsbuildinfo
            ~/.npm
            node_modules/.cache
            dist
          key: publish-${{ runner.os }}-${{ hashFiles('src/**/*', 'tsconfig.json', 'package-lock.json', 'package.json') }}
          restore-keys: |
            publish-${{ runner.os }}-
            build-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📋 Get package information
        id: package-info
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          echo "📦 Package: $PACKAGE_NAME"
          echo "🏷️  Version: $PACKAGE_VERSION"

      - name: 🔍 Check if version already exists
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.package_version }}"

          echo "🔍 Checking if $PACKAGE_NAME@$PACKAGE_VERSION already exists on NPM..."

          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
            echo "❌ Version $PACKAGE_VERSION already exists on NPM!"
            echo "📋 Please update the version in package.json before publishing"
            echo "🔗 View on NPM: https://www.npmjs.com/package/$PACKAGE_NAME"
            exit 1
          else
            echo "✅ Version $PACKAGE_VERSION is available for publishing"
          fi

      - name: 🔍 Verify package integrity
        run: npm audit signatures

      - name: 🧪 Run tests
        run: npm test

      - name: 📝 Run linting
        run: npm run lint

      - name: 🏗️ Build project
        run: npm run build

      - name: 🔍 Validate build artifacts
        run: |
          # Check if build artifacts exist
          if [ ! -f "lib/index.js" ]; then
            echo "❌ Build artifacts not found!"
            exit 1
          fi

          # Check if binary is executable
          if [ ! -x "bin/create-pr.js" ]; then
            echo "❌ Binary is not executable!"
            exit 1
          fi

          echo "✅ Build artifacts validated"

      - name: 🔒 Security audit
        run: |
          echo "🔒 Running security audit..."
          if npm audit --audit-level=high; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "⚠️ Security vulnerabilities detected"
            echo "📋 Review the output above and consider fixing before publishing"
          fi
        continue-on-error: true

      - name: 🏷️ Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.package_version }}"

          echo "🏷️ Creating GitHub release for $TAG_VERSION..."

          # Determine if prerelease
          PRERELEASE_FLAG=""
          if [[ "$TAG_VERSION" =~ - ]]; then
            PRERELEASE_FLAG="--prerelease"
            echo "📋 Creating prerelease"
          fi

          gh release create "$TAG_VERSION" \
            --title "Release $TAG_VERSION" \
            --notes "## 🚀 What's New in $TAG_VERSION

          ### Changes
          - Auto-generated release from version tag
          - See commit history for detailed changes

          ### Installation
          \`\`\`bash
          npm install -g $PACKAGE_NAME@$PACKAGE_VERSION
          \`\`\`

          ### Usage
          \`\`\`bash
          create-pr create --jira YOUR-123
          \`\`\`

          For full documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)" \
            $PRERELEASE_FLAG

          echo "✅ GitHub release created"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 🧪 NPM Publish (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.package_version }}"

          echo "🧪 Running in dry-run mode - no actual publish"
          echo "📦 Would publish: $PACKAGE_NAME@$PACKAGE_VERSION"
          echo ""

          npm publish --dry-run

          echo ""
          echo "✅ Dry run completed successfully"
          echo "💡 Remove --dry-run to actually publish"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🚀 Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.package_version }}"

          echo "🚀 Publishing to NPM..."
          echo "📦 Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          echo ""

          # Publish to NPM
          npm publish --access public

          echo ""
          echo "✅ Successfully published $PACKAGE_NAME@$PACKAGE_VERSION"
          echo "📦 Install with: npm install -g $PACKAGE_NAME@$PACKAGE_VERSION"
          echo "🔗 View on NPM: https://www.npmjs.com/package/$PACKAGE_NAME"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📊 Post-publish validation
        if: github.event.inputs.dry_run != 'true'
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.package_version }}"

          echo "⏳ Polling NPM registry for package availability..."
          echo "📦 Package: $PACKAGE_NAME@$PACKAGE_VERSION"

          # Polling configuration
          MAX_ATTEMPTS=20
          POLL_INTERVAL=5
          ATTEMPT=0
          PACKAGE_AVAILABLE=false

          # Poll until package is available or max attempts reached
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            ELAPSED_TIME=$((ATTEMPT * POLL_INTERVAL))
            
            echo "📊 Attempt $ATTEMPT/$MAX_ATTEMPTS (${ELAPSED_TIME}s elapsed) - Checking package availability..."
            
            # Try to fetch package info from npm
            if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
              echo "✅ Package is now available on NPM registry!"
              echo "⏱️  Package became available after ${ELAPSED_TIME} seconds"
              PACKAGE_AVAILABLE=true
              break
            else
              echo "   ⏳ Package not yet available, waiting ${POLL_INTERVAL}s..."
              
              # Don't sleep on the last attempt
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                sleep $POLL_INTERVAL
              fi
            fi
          done

          # Final status
          if [ "$PACKAGE_AVAILABLE" = true ]; then
            echo ""
            echo "🎉 Validation successful!"
            echo "🔗 NPM: https://www.npmjs.com/package/$PACKAGE_NAME/v/$PACKAGE_VERSION"
          else
            echo ""
            echo "⚠️ Package not detected after $((MAX_ATTEMPTS * POLL_INTERVAL)) seconds"
            echo "📋 This doesn't mean publishing failed - NPM sync can take longer"
            echo "🔍 Manually verify: npm view $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "🔗 NPM: https://www.npmjs.com/package/$PACKAGE_NAME"
          fi

      - name: 💬 Success notification
        if: success()
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.package_name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.package_version }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"

          if [ "$DRY_RUN" = "true" ]; then
            echo "🎉 DRY RUN COMPLETED!"
            echo ""
            echo "📦 Package: $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "✅ All checks passed - ready for publishing"
            echo ""
            echo "💡 To actually publish, run without --dry-run flag"
          else
            echo "🎉 SUCCESS! Package published successfully"
            echo ""
            echo "📦 Package: $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "🔗 NPM: https://www.npmjs.com/package/$PACKAGE_NAME"
            echo "📚 GitHub: https://github.com/${{ github.repository }}"
            echo ""
            echo "🚀 Users can now install with:"
            echo "   npm install -g $PACKAGE_NAME@$PACKAGE_VERSION"
          fi

  # Notify on failure
  notify_failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: publish
    if: failure()

    steps:
      - name: 🚨 Failure notification
        run: |
          echo "❌ Publishing workflow failed!"
          echo ""
          echo "📋 Please check the logs above for details."
          echo ""
          echo "🔍 Common issues:"
          echo ""
          echo "1. **NPM_TOKEN not configured**"
          echo "   - Check that NPM_TOKEN secret is set in repository settings"
          echo "   - Ensure the token has publish permissions"
          echo ""
          echo "2. **Version already exists**"
          echo "   - The version in package.json already exists on NPM"
          echo "   - Update the version before publishing"
          echo ""
          echo "3. **Tests or linting failures**"
          echo "   - Fix any failing tests or lint errors"
          echo "   - Run 'npm test' and 'npm run lint' locally"
          echo ""
          echo "4. **Build errors**"
          echo "   - Ensure 'npm run build' completes successfully"
          echo "   - Check TypeScript compilation errors"
          echo ""
          echo "5. **Package integrity issues**"
          echo "   - Review npm audit results"
          echo "   - Fix security vulnerabilities if needed"
          echo ""
          echo "💡 For more help, check the workflow logs or contact the maintainers"
