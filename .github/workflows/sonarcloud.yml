name: SonarCloud Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files for SonarCloud
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test -- --coverage --watchAll=false

      - name: Build project
        run: npm run build

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Additional arguments for the sonarcloud scanner
          args: >
            -Dsonar.projectKey=create-pull-request
            -Dsonar.organization=doraemon0905
            -Dsonar.sources=src
            -Dsonar.tests=src/__tests__
            -Dsonar.test.inclusions=**/*.test.ts,**/*.spec.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/node_modules/**,**/lib/**,**/scripts/**
            -Dsonar.exclusions=node_modules/**,lib/**,coverage/**,scripts/**,**/*.d.ts
            -Dsonar.cpd.exclusions=**/*.test.ts,**/*.spec.ts

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Wait for Quality Gate
        uses: sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        timeout-minutes: 5

      - name: Quality Gate Status
        run: |
          if [ "${{ steps.sonarqube-quality-gate.outputs.quality-gate-status }}" != "PASSED" ]; then
            echo "Quality Gate failed! Please fix the issues before merging."
            exit 1
          else
            echo "Quality Gate passed!"
          fi
