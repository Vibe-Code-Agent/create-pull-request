name: SonarCloud Analysis

on:
  workflow_run:
    workflows: ["üîç CI/CD Pipeline"]
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      triggered_by:
        description: 'Who triggered this workflow'
        required: false
        default: 'manual'
        type: string
      ci_run_id:
        description: 'CI run ID that triggered this workflow'
        required: false
        type: string
      pr_number:
        description: 'Pull request number for commenting'
        required: false
        type: string
  repository_dispatch:
    types: [sonarcloud-trigger]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    outputs:
      quality_gate_status: ${{ steps.quality-gate.outputs.quality_gate_status }}
      quality_gate_result: ${{ steps.quality-gate.outputs.quality_gate_result }}
      bugs: ${{ steps.sonar-metrics.outputs.bugs }}
      vulnerabilities: ${{ steps.sonar-metrics.outputs.vulnerabilities }}
      security_hotspots: ${{ steps.sonar-metrics.outputs.security_hotspots }}
      code_smells: ${{ steps.sonar-metrics.outputs.code_smells }}
      coverage: ${{ steps.sonar-metrics.outputs.coverage }}
      duplicated_lines: ${{ steps.sonar-metrics.outputs.duplicated_lines }}
      lines_of_code: ${{ steps.sonar-metrics.outputs.lines_of_code }}
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'repository_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - name: Show trigger information
        run: |
          echo "üîç SonarCloud Analysis Trigger Information"
          echo "=========================================="
          echo "Event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Triggered by: ${{ github.event.inputs.triggered_by }}"
            echo "CI Run ID: ${{ github.event.inputs.ci_run_id }}"
            echo "PR Number: ${{ github.event.inputs.pr_number }}"
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Triggered by: Repository dispatch event"
            echo "Event Type: ${{ github.event.action }}"
            echo "Triggered by: ${{ github.event.client_payload.triggered_by }}"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Triggered by: CI workflow completion"
            echo "CI Workflow: ${{ github.event.workflow_run.name }}"
          fi
          echo ""

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files for SonarCloud
          fetch-depth: 0

      - name: Download coverage artifacts from CI
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-20
          path: coverage/
          github-token: ${{ secrets.GH_TOKEN }}
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate coverage if artifact not found
        run: |
          if [ ! -f "coverage/lcov.info" ]; then
            echo "‚ö†Ô∏è Coverage artifact not found, generating coverage locally..."
            npm test -- --coverage --watchAll=false
            echo "‚úÖ Coverage generated locally"
          else
            echo "‚úÖ Using coverage from CI artifact"
          fi

      - name: Verify coverage file exists
        run: |
          if [ -f "coverage/lcov.info" ]; then
            echo "‚úÖ Coverage file found: coverage/lcov.info"
            echo "Coverage file size: $(wc -l < coverage/lcov.info) lines"
          else
            echo "‚ùå Coverage file not found: coverage/lcov.info"
            echo "Available files in coverage directory:"
            ls -la coverage/ || echo "Coverage directory does not exist"
            exit 1
          fi

      - name: Prepare SonarCloud arguments
        id: sonar-args
        run: |
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          
          # Base arguments for all scans
          BASE_ARGS="-Dsonar.projectKey=create-pull-request -Dsonar.organization=doraemon0905 -Dsonar.sources=src -Dsonar.tests=src/__tests__ -Dsonar.test.inclusions=**/*.test.ts,**/*.spec.ts -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/node_modules/**,**/lib/**,**/scripts/** -Dsonar.exclusions=node_modules/**,lib/**,coverage/**,scripts/**,**/*.d.ts -Dsonar.cpd.exclusions=**/*.test.ts,**/*.spec.ts"
          
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
            # PR-specific analysis - analyze only the changes in this PR
            echo "üîç Configuring SonarCloud for PR-specific analysis (PR #$PR_NUMBER)"
            
            # Get PR information
            PR_BASE=$(gh pr view $PR_NUMBER --json baseRefName --jq '.baseRefName')
            PR_HEAD=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
            
            echo "üìã PR Details:"
            echo "  PR Number: $PR_NUMBER"
            echo "  Base branch: $PR_BASE"
            echo "  Head branch: $PR_HEAD"
            
            # PR-specific arguments
            PR_ARGS="-Dsonar.pullrequest.key=$PR_NUMBER -Dsonar.pullrequest.branch=$PR_HEAD -Dsonar.pullrequest.base=$PR_BASE"
            SONAR_ARGS="$BASE_ARGS $PR_ARGS"
            
            echo "‚úÖ Using PR-specific analysis mode"
          else
            # Full project analysis (fallback)
            echo "üîç No PR number provided, using full project analysis"
            SONAR_ARGS="$BASE_ARGS"
            echo "‚úÖ Using full project analysis mode"
          fi
          
          echo "sonar_args=$SONAR_ARGS" >> $GITHUB_OUTPUT
          echo "üìã SonarCloud arguments: $SONAR_ARGS"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: SonarCloud Scan
        id: sonarcloud-scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Use dynamically prepared arguments
          args: ${{ steps.sonar-args.outputs.sonar_args }}
        continue-on-error: true

      - name: Wait for SonarCloud Quality Gate
        id: quality-gate
        run: |
          echo "‚è≥ Waiting for SonarCloud Quality Gate result..."
          sleep 30
          
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
            # PR-specific quality gate check
            echo "üîç Checking Quality Gate for PR #$PR_NUMBER..."
            
            # For PR analysis, use the pull request specific API
            QUALITY_GATE_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=create-pull-request&pullRequest=$PR_NUMBER" \
              | jq -r '.projectStatus.status // "ERROR"')
            
            echo "üéØ PR-specific Quality Gate Status: $QUALITY_GATE_STATUS"
          else
            # Full project quality gate check (fallback)
            echo "üîç Checking Quality Gate for full project..."
            
            QUALITY_GATE_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=create-pull-request" \
              | jq -r '.projectStatus.status // "ERROR"')
            
            echo "üìä Project Quality Gate Status: $QUALITY_GATE_STATUS"
          fi
          
          echo "quality_gate_status=$QUALITY_GATE_STATUS" >> $GITHUB_OUTPUT
          echo "üîç Final Quality Gate Status: $QUALITY_GATE_STATUS"
          
          if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
            echo "‚úÖ Quality Gate passed!"
            if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
              echo "quality_gate_result=‚úÖ **Quality Gate: PASSED** (PR #$PR_NUMBER)" >> $GITHUB_OUTPUT
            else
              echo "quality_gate_result=‚úÖ **Quality Gate: PASSED**" >> $GITHUB_OUTPUT
            fi
          elif [ "$QUALITY_GATE_STATUS" = "WARN" ]; then
            echo "‚ö†Ô∏è Quality Gate passed with warnings"
            if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
              echo "quality_gate_result=‚ö†Ô∏è **Quality Gate: PASSED with warnings** (PR #$PR_NUMBER)" >> $GITHUB_OUTPUT
            else
              echo "quality_gate_result=‚ö†Ô∏è **Quality Gate: PASSED with warnings**" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Quality Gate failed!"
            if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
              echo "quality_gate_result=‚ùå **Quality Gate: FAILED** (PR #$PR_NUMBER)" >> $GITHUB_OUTPUT
            else
              echo "quality_gate_result=‚ùå **Quality Gate: FAILED**" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get SonarCloud metrics
        id: sonar-metrics
        run: |
          echo "üìä Fetching SonarCloud metrics..."
          
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
            # PR-specific metrics
            echo "üéØ Fetching metrics for PR #$PR_NUMBER..."
            
            METRICS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/measures/component?component=create-pull-request&pullRequest=$PR_NUMBER&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating")
          else
            # Full project metrics (fallback)
            echo "üìä Fetching metrics for full project..."
            
            METRICS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "https://sonarcloud.io/api/measures/component?component=create-pull-request&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating")
          fi
          
          # Parse metrics
          BUGS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"')
          VULNERABILITIES=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"')
          SECURITY_HOTSPOTS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="security_hotspots") | .value // "0"')
          CODE_SMELLS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "0"')
          COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
          DUPLICATED_LINES=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value // "0"')
          LINES_OF_CODE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="ncloc") | .value // "0"')
          
          echo "üìã Metrics Summary:"
          echo "  Bugs: $BUGS"
          echo "  Vulnerabilities: $VULNERABILITIES"
          echo "  Security Hotspots: $SECURITY_HOTSPOTS"
          echo "  Code Smells: $CODE_SMELLS"
          echo "  Coverage: $COVERAGE%"
          echo "  Duplicated Lines: $DUPLICATED_LINES%"
          echo "  Lines of Code: $LINES_OF_CODE"
          
          echo "bugs=$BUGS" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "security_hotspots=$SECURITY_HOTSPOTS" >> $GITHUB_OUTPUT
          echo "code_smells=$CODE_SMELLS" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "duplicated_lines=$DUPLICATED_LINES" >> $GITHUB_OUTPUT
          echo "lines_of_code=$LINES_OF_CODE" >> $GITHUB_OUTPUT

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: always() && needs.sonarcloud.result != 'cancelled'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PR number
        id: pr-number
        run: |
          # Priority 1: Use input parameter if provided (from CI workflow)
          if [ -n "${{ github.event.inputs.pr_number }}" ] && [ "${{ github.event.inputs.pr_number }}" != "" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "üîç Using PR number from input: $PR_NUMBER"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            # Priority 2: For workflow_run events, get PR number from the triggering workflow
            PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls \
              --jq ".[] | select(.head.sha == \"${{ github.event.workflow_run.head_sha }}\") | .number" \
              || echo "")
            echo "üîç Retrieved PR number from workflow_run: $PR_NUMBER"
          else
            # Priority 3: For other events, try to get from context
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "üîç Using PR number from context: $PR_NUMBER"
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üîç Final PR Number: $PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create SonarCloud comment for PR
        if: steps.pr-number.outputs.pr_number != ''
        run: |
          PR_NUMBER="${{ steps.pr-number.outputs.pr_number }}"
          QUALITY_GATE_STATUS="${{ needs.sonarcloud.outputs.quality_gate_status }}"
          QUALITY_GATE_RESULT="${{ needs.sonarcloud.outputs.quality_gate_result }}"
          
          # Get metrics from sonarcloud job
          BUGS="${{ needs.sonarcloud.outputs.bugs }}"
          VULNERABILITIES="${{ needs.sonarcloud.outputs.vulnerabilities }}"
          SECURITY_HOTSPOTS="${{ needs.sonarcloud.outputs.security_hotspots }}"
          CODE_SMELLS="${{ needs.sonarcloud.outputs.code_smells }}"
          COVERAGE="${{ needs.sonarcloud.outputs.coverage }}"
          DUPLICATED_LINES="${{ needs.sonarcloud.outputs.duplicated_lines }}"
          LINES_OF_CODE="${{ needs.sonarcloud.outputs.lines_of_code }}"
          
          # Create status message based on quality gate
          if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
            STATUS_MESSAGE="‚úÖ **Quality Gate: PASSED** - Great job! Your code meets all quality standards."
          elif [ "$QUALITY_GATE_STATUS" = "WARN" ]; then
            STATUS_MESSAGE="‚ö†Ô∏è **Quality Gate: PASSED with warnings** - Code quality is acceptable but could be improved."
          else
            STATUS_MESSAGE="‚ùå **Quality Gate: FAILED** - Please review and address the issues below before merging."
          fi
          
          # Create recommendations based on metrics
          RECOMMENDATIONS=""
          if [ "$BUGS" -gt "0" ]; then
            RECOMMENDATIONS="$RECOMMENDATIONS
          - üêõ **$BUGS bug(s) detected** - Please fix these issues as they may cause runtime problems"
          fi
          if [ "$VULNERABILITIES" -gt "0" ]; then
            RECOMMENDATIONS="$RECOMMENDATIONS
          - üîí **$VULNERABILITIES vulnerability(ies) found** - Security issues that need immediate attention"
          fi
          if [ "$SECURITY_HOTSPOTS" -gt "0" ]; then
            RECOMMENDATIONS="$RECOMMENDATIONS
          - üî• **$SECURITY_HOTSPOTS security hotspot(s)** - Review these potential security risks"
          fi
          if [ "$CODE_SMELLS" -gt "10" ]; then
            RECOMMENDATIONS="$RECOMMENDATIONS
          - üí© **$CODE_SMELLS code smell(s)** - Consider refactoring to improve maintainability"
          fi
          if [ "${COVERAGE%.*}" -lt "80" ] 2>/dev/null; then
            RECOMMENDATIONS="$RECOMMENDATIONS
          - üìà **Coverage is $COVERAGE%** - Consider adding more tests (target: 80%+)"
          fi
          
          # Create comment body
          COMMENT_BODY="## üîç SonarCloud Analysis Results (PR #$PR_NUMBER)

          $STATUS_MESSAGE

          > üéØ **PR-Specific Analysis**: This analysis focuses only on the changes introduced in this pull request, not the entire project."

          ### üìä Code Quality Metrics
          | Metric | Value | Status |
          |--------|-------|--------|
          | üêõ Bugs | $BUGS | $([ "$BUGS" = "0" ] && echo "‚úÖ" || echo "‚ùå") |
          | üîí Vulnerabilities | $VULNERABILITIES | $([ "$VULNERABILITIES" = "0" ] && echo "‚úÖ" || echo "‚ùå") |
          | üî• Security Hotspots | $SECURITY_HOTSPOTS | $([ "$SECURITY_HOTSPOTS" = "0" ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |
          | üí© Code Smells | $CODE_SMELLS | $([ "$CODE_SMELLS" -le "10" ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |
          | üìà Coverage | $COVERAGE% | $([ "${COVERAGE%.*}" -ge "80" ] 2>/dev/null && echo "‚úÖ" || echo "‚ö†Ô∏è") |
          | üìã Duplicated Lines | $DUPLICATED_LINES% | $([ "${DUPLICATED_LINES%.*}" -le "3" ] 2>/dev/null && echo "‚úÖ" || echo "‚ö†Ô∏è") |
          | üìè Lines of Code | $LINES_OF_CODE | ‚ÑπÔ∏è |
          $([ -n "$RECOMMENDATIONS" ] && echo "
          ### üéØ Recommendations
          $RECOMMENDATIONS" || echo "
          ### üéâ All Good!
          No specific recommendations - your code quality looks great!")

          ### üîó Links
          - [üìä View detailed report on SonarCloud](https://sonarcloud.io/project/overview?id=create-pull-request)
          - [üéØ View this PR analysis](https://sonarcloud.io/project/pull_requests?id=create-pull-request&pullRequest=$PR_NUMBER)
          - [üìã View all pull request analyses](https://sonarcloud.io/project/pull_requests?id=create-pull-request)

          ---
          *This comment was automatically generated by the SonarCloud workflow. The workflow will always pass - use this feedback to improve code quality.*
          
          **Last updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          <!-- SONARCLOUD_ANALYSIS_COMMENT -->"
          
          # Check if there's already a SonarCloud comment and update it, or create a new one
          echo "üîç Checking for existing SonarCloud comments..."
          
          # Get existing comments and look for our identifier
          EXISTING_COMMENT_ID=$(gh pr view $PR_NUMBER --json comments --jq '.comments[] | select(.body | contains("<!-- SONARCLOUD_ANALYSIS_COMMENT -->")) | .id' | head -1)
          
          if [ -n "$EXISTING_COMMENT_ID" ] && [ "$EXISTING_COMMENT_ID" != "" ]; then
            echo "üìù Found existing SonarCloud comment (ID: $EXISTING_COMMENT_ID), updating..."
            
            # Update the existing comment
            if gh api repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT_ID \
              --method PATCH \
              --field body="$COMMENT_BODY"; then
              echo "‚úÖ Updated existing SonarCloud comment #$EXISTING_COMMENT_ID on PR #$PR_NUMBER"
            else
              echo "‚ö†Ô∏è Failed to update existing comment, creating new one instead..."
              gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
              echo "‚úÖ Created new SonarCloud comment on PR #$PR_NUMBER (fallback)"
            fi
          else
            echo "üìù No existing SonarCloud comment found, creating new one..."
            
            # Create new comment
            if gh pr comment $PR_NUMBER --body "$COMMENT_BODY"; then
              echo "‚úÖ Created new SonarCloud comment on PR #$PR_NUMBER"
            else
              echo "‚ùå Failed to create SonarCloud comment on PR #$PR_NUMBER"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Quality Gate Status Summary
        run: |
          QUALITY_GATE_STATUS="${{ needs.sonarcloud.outputs.quality_gate_status }}"
          SONARCLOUD_RESULT="${{ needs.sonarcloud.result }}"
          
          echo "üîç SonarCloud job result: $SONARCLOUD_RESULT"
          echo "üîç Quality Gate status: $QUALITY_GATE_STATUS"
          
          if [ "$SONARCLOUD_RESULT" = "failure" ]; then
            echo "‚ùå SonarCloud scan encountered issues, but workflow will continue"
            echo "Check the PR comment for details and SonarCloud report"
          elif [ "$QUALITY_GATE_STATUS" = "ERROR" ] || [ "$QUALITY_GATE_STATUS" = "FAILED" ]; then
            echo "‚ùå Quality Gate failed, but workflow will continue"
            echo "Check the PR comment for details and review the SonarCloud report"
          elif [ "$QUALITY_GATE_STATUS" = "WARN" ]; then
            echo "‚ö†Ô∏è Quality Gate passed with warnings"
            echo "Check the PR comment for details and review any issues"
          else
            echo "‚úÖ Quality Gate passed!"
            echo "Check the PR comment for detailed metrics"
          fi
          
          echo ""
          echo "üìä SonarCloud analysis completed successfully"
          echo "üîó View report: https://sonarcloud.io/project/overview?id=create-pull-request"
