name: 🔍 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security audits on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

# Cancel previous runs when a new commit is pushed to the same branch or PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Validate code quality on all pushes and PRs
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]  # Test multiple Node.js versions
    
    steps:
      - name: Check if run was cancelled
        run: |
          echo "🔍 CI Run Information:"
          echo "Workflow: ${{ github.workflow }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "✅ This run is proceeding (previous runs cancelled if any)"
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            lib
            *.tsbuildinfo
          key: build-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('src/**/*', 'tsconfig.json') }}
          restore-keys: |
            build-${{ runner.os }}-node${{ matrix.node-version }}-
            build-${{ runner.os }}-
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔍 Check package integrity
        run: |
          # Verify package-lock.json is in sync
          npm ci --dry-run
          
          # Check for security issues in dependencies
          npm audit --audit-level=moderate
        continue-on-error: ${{ matrix.node-version != 20 }}  # Only fail on primary version
      
      - name: 📝 Run ESLint
        run: npm run lint
      
      - name: 🏗️ Build TypeScript
        run: npm run build
      
      - name: 🧪 Run tests with coverage
        run: npm test -- --coverage --watchAll=false
      
      - name: 📊 Upload coverage artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30
      
      - name: 📊 Check build artifacts
        run: |
          echo "🔍 Checking build artifacts..."
          
          # Verify main entry point exists
          if [ ! -f "lib/index.js" ]; then
            echo "❌ Main entry point missing!"
            exit 1
          fi
          
          # Verify CLI binary exists and is executable
          if [ ! -f "bin/create-pr" ]; then
            echo "❌ CLI binary missing!"
            exit 1
          fi
          
          if [ ! -x "bin/create-pr" ]; then
            echo "❌ CLI binary not executable!"
            exit 1
          fi
          
          # Check TypeScript declarations
          if [ ! -f "lib/index.d.ts" ]; then
            echo "❌ TypeScript declarations missing!"
            exit 1
          fi
          
          echo "✅ All build artifacts present and valid"
      
      - name: 🔍 Package validation
        run: |
          echo "🔍 Validating package.json..."
          
          # Check required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'bin', 'license'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.error('❌ Missing required fields:', missing.join(', '));
              process.exit(1);
            }
            console.log('✅ All required package.json fields present');
          "
          
          # Validate semantic versioning
          node -e "
            const pkg = require('./package.json');
            const semverRegex = /^\\d+\\.\\d+\\.\\d+/;
            if (!semverRegex.test(pkg.version)) {
              console.error('❌ Invalid version format:', pkg.version);
              process.exit(1);
            }
            console.log('✅ Version format valid:', pkg.version);
          "
      
      - name: 🧪 Test CLI functionality (smoke test)
        run: |
          echo "🧪 Testing CLI functionality..."
          
          # Make binary executable (in case git doesn't preserve it)
          chmod +x bin/create-pr
          
          # Test help command
          node bin/create-pr --help > /dev/null
          if [ $? -eq 0 ]; then
            echo "✅ CLI help command works"
          else
            echo "❌ CLI help command failed"
            exit 1
          fi
          
          # Test config command
          node bin/create-pr config > /dev/null
          if [ $? -eq 0 ]; then
            echo "✅ CLI config command works"
          else
            echo "❌ CLI config command failed"
            exit 1
          fi
      
      - name: 📦 Test packaging
        if: matrix.node-version == 20  # Only test on primary version
        run: |
          echo "📦 Testing npm pack..."
          
          # Create pack output in temp location
          PACK_OUTPUT=$(mktemp)
          npm pack --dry-run > "$PACK_OUTPUT" 2>&1
          
          echo "📋 Package contents:"
          cat "$PACK_OUTPUT"
          echo ""
          
          # Check if essential files are included
          if ! grep -q "lib/" "$PACK_OUTPUT"; then
            echo "❌ Build artifacts not included in package"
            cat "$PACK_OUTPUT"
            exit 1
          fi
          
          if ! grep -q "bin/" "$PACK_OUTPUT"; then
            echo "❌ CLI binary not included in package"
            cat "$PACK_OUTPUT"
            exit 1
          fi
          
          if ! grep -q "README.md" "$PACK_OUTPUT"; then
            echo "❌ README not included in package"
            cat "$PACK_OUTPUT"
            exit 1
          fi
          
          echo "✅ Package contents validated"
          
          # Check package size
          TARBALL=$(npm pack --silent)
          PACKAGE_SIZE=$(ls -la "$TARBALL" | awk '{print $5}')
          echo "📦 Package size: $PACKAGE_SIZE bytes"
          
          # Clean up tarball
          rm -f "$TARBALL"
          rm -f "$PACK_OUTPUT"
          
          # Warn if package is too large (>5MB)
          if [ "$PACKAGE_SIZE" -gt 5242880 ]; then
            echo "⚠️ Package size is quite large (>5MB)"
          fi

  # Security and dependency checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Check if run was cancelled
        run: |
          echo "🔍 Security Job - CI Run Information:"
          echo "Workflow: ${{ github.workflow }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "✅ Security job proceeding (previous runs cancelled if any)"
      
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Cache security tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            /tmp/license-checker-*
            audit-report.json
          key: security-tools-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            security-tools-${{ runner.os }}-
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔒 Security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=moderate
          
          # Generate audit report
          npm audit --json > audit-report.json || true
          
          # Check for high/critical issues
          HIGH_ISSUES=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_ISSUES=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "Security summary:"
          echo "  High issues: $HIGH_ISSUES"
          echo "  Critical issues: $CRITICAL_ISSUES"
          
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "❌ Critical security issues found!"
            exit 1
          elif [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "⚠️ High security issues found - review recommended"
          else
            echo "✅ No high or critical security issues"
          fi
      
      - name: 🔍 License check
        run: |
          echo "🔍 Checking dependency licenses..."
          # This requires license-checker to be installed
          npx license-checker --summary || echo "License check skipped - license-checker not available"

  # Code quality analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📦 Cache analysis results
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .eslintcache
            coverage
          key: code-quality-${{ runner.os }}-${{ hashFiles('src/**/*', '.eslintrc.*', 'tsconfig.json') }}
          restore-keys: |
            code-quality-${{ runner.os }}-
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 📊 Code complexity analysis
        run: |
          echo "📊 Analyzing code complexity..."
          
          # Simple complexity check using find and wc
          TOTAL_LINES=$(find src -name "*.ts" -exec wc -l {} + | tail -1 | awk '{print $1}')
          FILE_COUNT=$(find src -name "*.ts" | wc -l)
          
          if [ "$FILE_COUNT" -gt 0 ]; then
            AVG_LINES=$((TOTAL_LINES / FILE_COUNT))
            echo "📈 Code statistics:"
            echo "   Total files: $FILE_COUNT"
            echo "   Total lines: $TOTAL_LINES"
            echo "   Average lines per file: $AVG_LINES"
            
            if [ "$AVG_LINES" -gt 300 ]; then
              echo "⚠️ Average file size is quite large - consider refactoring"
            else
              echo "✅ File sizes look reasonable"
            fi
          fi
      
      - name: 🔍 Dead code detection
        run: |
          echo "🔍 Checking for potential dead code..."
          
          # Check for TODO/FIXME comments
          TODO_COUNT=$(find src -name "*.ts" -exec grep -l "TODO\|FIXME\|XXX" {} + | wc -l)
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "📝 Found $TODO_COUNT files with TODO/FIXME comments"
            find src -name "*.ts" -exec grep -Hn "TODO\|FIXME\|XXX" {} +
          else
            echo "✅ No TODO/FIXME comments found"
          fi

  # Compatibility testing
  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20]
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📦 Cache compatibility build
        uses: actions/cache@v4
        with:
          path: |
            lib
            *.tsbuildinfo
            ~/.npm
          key: compat-build-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('src/**/*', 'tsconfig.json', 'package-lock.json') }}
          restore-keys: |
            compat-build-${{ runner.os }}-${{ matrix.node-version }}-
            compat-build-${{ runner.os }}-
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🏗️ Build project
        run: npm run build
      
      - name: 🧪 Test CLI on ${{ matrix.os }}
        shell: bash
        run: |
          echo "🧪 Testing CLI functionality on ${{ matrix.os }}..."
          
          # Test help command
          node bin/create-pr --help
          
          # Test config command
          node bin/create-pr config
          
          echo "✅ CLI works on ${{ matrix.os }}"

  # Report results
  report:
    runs-on: ubuntu-latest
    needs: [validate, security, code-quality, compatibility]
    if: always()
    
    steps:
      - name: 📊 CI Summary
        run: |
          echo "📊 CI/CD Pipeline Summary"
          echo "========================"
          echo "Validation: ${{ needs.validate.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Compatibility: ${{ needs.compatibility.result }}"
          echo ""
          
          if [[ "${{ needs.validate.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.compatibility.result }}" == "success" ]]; then
            echo "✅ All checks passed! Ready for release."
          else
            echo "❌ Some checks failed. Review the results above."
          fi

  # Trigger SonarCloud analysis when all CI jobs pass
  trigger-sonarcloud:
    runs-on: ubuntu-latest
    needs: [validate, security, code-quality, compatibility, report]
    if: |
      needs.validate.result == 'success' && 
      needs.security.result == 'success' && 
      needs.code-quality.result == 'success' && 
      needs.compatibility.result == 'success' &&
      needs.report.result == 'success'
    
    permissions:
      actions: write
      contents: read
    
    steps:
      - name: 🚀 Trigger SonarCloud Analysis
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const ref = context.ref;
            const branchName = context.ref.replace('refs/heads/', '').replace('refs/pull/', '').replace('/merge', '');
            
            console.log(`🚀 Triggering SonarCloud analysis for ${owner}/${repo}@${branchName}`);
            console.log(`📊 All CI jobs completed successfully, including report job`);
            console.log(`🔍 Original ref: ${ref}, Branch name: ${branchName}`);
            
             // Method 3: Direct API call using fetch (similar to curl command)
                console.log('🔍 Attempting direct API call to workflow file...');
                console.log('🔑 Using GH_TOKEN from secrets');
                const apiResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}/actions/workflows/sonarcloud.yml/dispatches`, {
                  method: 'POST',
                  headers: {
                    'Accept': 'application/vnd.github+json',
                    'Authorization': `Bearer ${{ secrets.GH_TOKEN }}`,
                    'X-GitHub-Api-Version': '2022-11-28'
                  },
                  body: JSON.stringify({
                    ref: branchName,
                    inputs: {
                      triggered_by: 'ci-pipeline',
                      ci_run_id: context.runId
                    }
                  })
                });
                
                if (apiResponse.ok) {
                  console.log('✅ Direct API call successful');
                  console.log(`📋 Response status: ${apiResponse.status}`);
                } else {
                  const errorText = await apiResponse.text();
                  console.log(`❌ Direct API call failed: ${apiResponse.status} - ${errorText}`);
                  throw new Error(`All trigger methods failed. Last error: ${apiResponse.status}`);
                }
