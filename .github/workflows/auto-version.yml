name: 🏷️ Auto Version Update

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  auto-version:
    # Only run when PR is merged or direct push to main, but skip if it's an auto version update PR or dependabot PR
    if: (github.event_name == 'push') || (github.event.pull_request.merged == true && !contains(github.event.pull_request.title, 'Auto version update') && github.event.pull_request.user.login != 'dependabot[bot]')
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed to push version tags and commits
      pull-requests: write # Needed to create pull requests
      issues: write # Needed to create pull requests

    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper git operations
          fetch-depth: 0
          # Use GitHub token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Configure Git
        run: |
          git config user.name "Bradley Nguyen"
          git config user.email "nguyentruonggiang91@gmail.com"

      - name: 📋 Get PR Information
        id: pr-info
        if: github.event_name == 'pull_request'
        run: |
          echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_labels=$(echo '${{ toJson(github.event.pull_request.labels.*.name) }}' | jq -r 'join(" ")')" >> $GITHUB_OUTPUT
          echo "pr_merged=${{ github.event.pull_request.merged }}" >> $GITHUB_OUTPUT

      - name: 🏷️ Run auto version update
        id: version-update
        run: |
          echo "🏷️ Running auto version update script..."

          # Set environment variables for the script
          export GITHUB_TOKEN="${{ secrets.GH_TOKEN }}"
          export CI=true
          export GITHUB_ACTIONS=true
          export GITHUB_ACTOR="${{ github.actor }}"

          # Run the auto version script
          if ./scripts/auto-version.sh; then
            echo "version_updated=true" >> $GITHUB_OUTPUT
            echo "✅ Version update completed successfully"
          else
            echo "version_updated=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No version update needed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔀 Create version update branch
        if: steps.version-update.outputs.version_updated == 'true'
        run: |
          echo "🔀 Creating version update branch..."

          # Create a new branch for the version update
          BRANCH_NAME="auto-version-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          # Push the branch
          git push origin "$BRANCH_NAME"
          echo "✅ Created and pushed branch $BRANCH_NAME"

      - name: 📋 Create Pull Request
        if: steps.version-update.outputs.version_updated == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🏷️ Auto version update to v${process.env.NEW_VERSION}`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## 🤖 Automated Version Update
              
              This PR was automatically created to update the package version.
              
              ### Changes
              - **Version bump type**: ${process.env.VERSION_TYPE}
              - **Previous version**: ${process.env.OLD_VERSION}
              - **New version**: ${process.env.NEW_VERSION}
              
              ### Files changed
              - \`package.json\` - Updated version number
              - \`package-lock.json\` - Updated lockfile (if applicable)
              
              This PR can be safely merged to complete the version update.
              
              ### Next steps
              After merging this PR:
              1. A git tag \`v${process.env.NEW_VERSION}\` will be created
              2. A GitHub release will be published
              3. The publish workflow may be triggered (if configured)
              
              ---
              🤖 Generated automatically by the auto-version workflow`
            });

            console.log(`✅ Created pull request #${pullRequest.number}`);
            console.log(`🔗 PR URL: ${pullRequest.html_url}`);

            // Enable auto-merge option for the PR
            try {
              // Wait a moment for the PR to be fully created
              await new Promise(resolve => setTimeout(resolve, 3000));
              
              // Enable auto-merge with squash method
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_request_number: pullRequest.number,
                merge_method: 'squash'
              });
              
              console.log(`✅ Auto-merge enabled for PR #${pullRequest.number} with squash method`);
              console.log(`🔀 PR will be automatically merged when all checks pass`);
              
            } catch (error) {
              console.log(`ℹ️ Could not enable auto-merge: ${error.message}`);
              console.log(`📋 Please manually review and merge PR #${pullRequest.number}`);
              console.log(`🔗 PR URL: ${pullRequest.html_url}`);
            }

      - name: 📊 Version Update Summary
        if: always()
        run: |
          echo "📊 Version Update Summary"
          echo "========================"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR Number: ${{ github.event.number }}"
            echo "PR Title: ${{ github.event.pull_request.title }}"
            echo "PR Merged: ${{ github.event.pull_request.merged }}"
          fi

          echo "Version Updated: ${{ steps.version-update.outputs.version_updated }}"

          if [ -n "$OLD_VERSION" ] && [ -n "$NEW_VERSION" ]; then
            echo "Old Version: $OLD_VERSION"
            echo "New Version: $NEW_VERSION"
            echo "Bump Type: $VERSION_TYPE"
            echo "Git Tag: v$NEW_VERSION"
            echo ""
            echo "✅ Version successfully updated!"
          else
            echo ""
            echo "ℹ️ No version update was performed"
          fi

  # Create tag and release when version update PR is merged
  post-merge-release:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'Auto version update') && github.event.pull_request.user.login != 'dependabot[bot]'
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Extract version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version: $VERSION"

      - name: 🏷️ Create Git Tag
        run: |
          git config user.name "Bradley Nguyen"
          git config user.email "nguyentruonggiang91@gmail.com"

          TAG_NAME="v${{ steps.get-version.outputs.version }}"

          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "⚠️ Tag $TAG_NAME already exists, skipping tag creation"
          else
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "✅ Created and pushed tag $TAG_NAME"
          fi

      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: Release v${{ steps.get-version.outputs.version }}
          body: |
            ## 🚀 Auto Release v${{ steps.get-version.outputs.version }}

            This release was automatically created when version update PR was merged to main.

            ### What's Changed
            - Merged PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}

            ### Installation
            ```bash
            npm install -g publish-pull-request@${{ steps.get-version.outputs.version }}
            ```

            ### Usage
            ```bash
            create-pr create --jira YOUR-123
            ```

            For full documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          draft: false
          prerelease: ${{ contains(steps.get-version.outputs.version, '-') }}

  # Optional: Trigger publish workflow after version update
  trigger-publish:
    needs: post-merge-release
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'Auto version update') && github.event.pull_request.user.login != 'dependabot[bot]'

    steps:
      - name: 🚀 Trigger Publish Workflow
        run: |
          echo "🚀 Version was updated, consider triggering publish workflow"
          echo "💡 You can manually trigger the publish workflow from the Actions tab"
          echo "📦 Or set up automatic publishing by uncommenting the workflow_dispatch below"

          # Uncomment the following lines to automatically trigger publish after version update
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/publish.yml/dispatches \
            -d '{"ref":"main","inputs":{"version_type":"patch","dry_run":"false"}}'
