name: 🏷️ Auto Version Update

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  auto-version:
    name: Auto Version Update
    # Only run when PR is merged, but skip auto version update PRs and dependabot PRs
    if: |
      github.event.pull_request.merged == true && 
      !contains(github.event.pull_request.title, 'Auto version update') && 
      github.event.pull_request.user.login != 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 📋 Get PR Information
        id: pr-info
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_LABELS='${{ toJson(github.event.pull_request.labels.*.name) }}'

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_labels=$(echo "$PR_LABELS" | jq -r 'join(" ")')" >> $GITHUB_OUTPUT

          echo "📋 PR #$PR_NUMBER: $PR_TITLE"

      - name: 🏷️ Run auto version update
        id: version-update
        run: |
          echo "🏷️ Running auto version update script..."

          # Set environment variables for the script
          export CI=true
          export GITHUB_ACTIONS=true
          export GITHUB_ACTOR="${{ github.actor }}"

          # Run the auto version script and capture the exit code
          # We always exit successfully from this step
          if ./scripts/auto-version.sh; then
            echo "version_updated=true" >> $GITHUB_OUTPUT
            echo "✅ Version update completed successfully"
            exit 0
          else
            echo "version_updated=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No version update needed - workflow will complete successfully"
            echo "📋 Subsequent steps will be skipped (no PR creation needed)"
            exit 0  # Exit successfully even when no update is needed
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 🔀 Create version update branch and PR
        if: steps.version-update.outputs.version_updated == 'true'
        id: create-pr
        run: |
          echo "🔀 Creating version update branch..."

          # Create a new branch for the version update
          BRANCH_NAME="auto-version-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"

          # Push the branch
          git push origin "$BRANCH_NAME"
          echo "✅ Created and pushed branch $BRANCH_NAME"

          # Create PR using gh CLI
          echo "📋 Creating pull request..."
          PR_BODY="## 🤖 Automated Version Update

          This PR was automatically created to update the package version.

          ### Changes
          - **Version bump type**: ${VERSION_TYPE:-auto}
          - **Previous version**: ${OLD_VERSION:-N/A}
          - **New version**: ${NEW_VERSION:-See package.json}

          ### Files changed
          - \`package.json\` - Updated version number
          - \`package-lock.json\` - Updated lockfile (if applicable)

          This PR can be safely merged to complete the version update.

          ### Next steps
          After merging this PR:
          1. A git tag will be created
          2. A GitHub release will be published
          3. The package may be published to npm (if configured)

          ---
          🤖 Generated automatically by the auto-version workflow"

          PR_URL=$(gh pr create \
            --title "🏷️ Auto version update to v${NEW_VERSION:-next}" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME" \
            --label "automated" \
            --label "version-update")

          PR_NUMBER=$(echo "$PR_URL" | grep -oP '\d+$')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

          echo "✅ Created pull request #$PR_NUMBER"
          echo "🔗 $PR_URL"

          # Enable auto-merge
          echo "🔄 Enabling auto-merge..."
          if gh pr merge "$PR_NUMBER" --auto --squash; then
            echo "✅ Auto-merge enabled successfully"
            echo "⏳ PR will merge automatically when checks pass"
          else
            echo "⚠️ Could not enable auto-merge"
            echo "📋 Please manually review and merge PR #$PR_NUMBER"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 📊 Version Update Summary
        if: always()
        run: |
          echo "📊 Version Update Summary"
          echo "========================"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "PR Number: ${{ steps.pr-info.outputs.pr_number }}"
          echo "PR Title: ${{ steps.pr-info.outputs.pr_title }}"
          echo "Version Updated: ${{ steps.version-update.outputs.version_updated }}"
          echo ""

          if [ "${{ steps.version-update.outputs.version_updated }}" = "true" ]; then
            echo "✅ Version update PR created successfully!"
            echo "🔗 PR URL: ${{ steps.create-pr.outputs.pr_url }}"
            echo ""
            echo "📋 The PR will be auto-merged when CI checks pass"
          else
            echo "✅ Workflow completed successfully"
            echo "ℹ️ No version update was needed for this PR"
            echo "📋 This is expected behavior - not all PRs require version updates"
            echo ""
            echo "💡 Version updates are skipped when:"
            echo "   - PR is from Dependabot"
            echo "   - PR title contains 'Auto version update'"
            echo "   - No changes warrant a version bump"
          fi

  # Create tag and release when version update PR is merged
  post-merge-release:
    name: Post-Merge Release
    if: |
      github.event.pull_request.merged == true && 
      contains(github.event.pull_request.title, 'Auto version update')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 📋 Extract version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version: $VERSION"

      - name: 🏷️ Create and push Git Tag
        id: create-tag
        run: |
          TAG_NAME="v${{ steps.get-version.outputs.version }}"

          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "⚠️ Tag $TAG_NAME already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "✅ Created and pushed tag $TAG_NAME"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 🏷️ Create GitHub Release
        if: steps.create-tag.outputs.tag_exists == 'false'
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          TAG_NAME="${{ steps.create-tag.outputs.tag_name }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Determine if this is a prerelease
          PRERELEASE_FLAG=""
          if [[ "$VERSION" =~ - ]]; then
            PRERELEASE_FLAG="--prerelease"
            echo "📋 Creating prerelease for $TAG_NAME"
          else
            echo "📋 Creating release for $TAG_NAME"
          fi

          # Create release using gh CLI
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "## 🚀 Release $TAG_NAME

          This release was automatically created when the version update PR was merged.

          ### What's Changed
          - Merged PR #$PR_NUMBER: $PR_TITLE

          ### Installation
          \`\`\`bash
          npm install -g publish-pull-request@$VERSION
          \`\`\`

          ### Usage
          \`\`\`bash
          create-pr create --jira YOUR-123
          \`\`\`

          For full documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)" \
            $PRERELEASE_FLAG

          echo "✅ GitHub release created successfully"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 📊 Release Summary
        if: always()
        run: |
          echo "📊 Release Summary"
          echo "=================="
          echo "Version: ${{ steps.get-version.outputs.version }}"
          echo "Tag: ${{ steps.create-tag.outputs.tag_name }}"
          echo "Tag Already Existed: ${{ steps.create-tag.outputs.tag_exists }}"

          if [ "${{ steps.create-tag.outputs.tag_exists }}" = "false" ]; then
            echo "✅ New release created successfully"
          else
            echo "ℹ️ Tag already existed, skipped release creation"
          fi
